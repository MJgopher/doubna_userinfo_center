// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: user_center.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UseCenterClient is the client API for UseCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UseCenterClient interface {
	LoginByPW(ctx context.Context, in *LoginByPWReq, opts ...grpc.CallOption) (*LoginByPWResp, error)
	LoginBYSMs(ctx context.Context, in *LoginBySmsReq, opts ...grpc.CallOption) (*LoginBySmsReq, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
}

type useCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUseCenterClient(cc grpc.ClientConnInterface) UseCenterClient {
	return &useCenterClient{cc}
}

func (c *useCenterClient) LoginByPW(ctx context.Context, in *LoginByPWReq, opts ...grpc.CallOption) (*LoginByPWResp, error) {
	out := new(LoginByPWResp)
	err := c.cc.Invoke(ctx, "/grpcinclass.UseCenter/LoginByPW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useCenterClient) LoginBYSMs(ctx context.Context, in *LoginBySmsReq, opts ...grpc.CallOption) (*LoginBySmsReq, error) {
	out := new(LoginBySmsReq)
	err := c.cc.Invoke(ctx, "/grpcinclass.UseCenter/LoginBYSMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useCenterClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/grpcinclass.UseCenter/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UseCenterServer is the server API for UseCenter service.
// All implementations must embed UnimplementedUseCenterServer
// for forward compatibility
type UseCenterServer interface {
	LoginByPW(context.Context, *LoginByPWReq) (*LoginByPWResp, error)
	LoginBYSMs(context.Context, *LoginBySmsReq) (*LoginBySmsReq, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	mustEmbedUnimplementedUseCenterServer()
}

// UnimplementedUseCenterServer must be embedded to have forward compatible implementations.
type UnimplementedUseCenterServer struct {
}

func (UnimplementedUseCenterServer) LoginByPW(context.Context, *LoginByPWReq) (*LoginByPWResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPW not implemented")
}
func (UnimplementedUseCenterServer) LoginBYSMs(context.Context, *LoginBySmsReq) (*LoginBySmsReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBYSMs not implemented")
}
func (UnimplementedUseCenterServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUseCenterServer) mustEmbedUnimplementedUseCenterServer() {}

// UnsafeUseCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UseCenterServer will
// result in compilation errors.
type UnsafeUseCenterServer interface {
	mustEmbedUnimplementedUseCenterServer()
}

func RegisterUseCenterServer(s grpc.ServiceRegistrar, srv UseCenterServer) {
	s.RegisterService(&UseCenter_ServiceDesc, srv)
}

func _UseCenter_LoginByPW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPWReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseCenterServer).LoginByPW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcinclass.UseCenter/LoginByPW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseCenterServer).LoginByPW(ctx, req.(*LoginByPWReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseCenter_LoginBYSMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBySmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseCenterServer).LoginBYSMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcinclass.UseCenter/LoginBYSMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseCenterServer).LoginBYSMs(ctx, req.(*LoginBySmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseCenter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseCenterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcinclass.UseCenter/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseCenterServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UseCenter_ServiceDesc is the grpc.ServiceDesc for UseCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UseCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcinclass.UseCenter",
	HandlerType: (*UseCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByPW",
			Handler:    _UseCenter_LoginByPW_Handler,
		},
		{
			MethodName: "LoginBYSMs",
			Handler:    _UseCenter_LoginBYSMs_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UseCenter_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center.proto",
}
